import pandas as pd
import numpy as np
import os
from docx import Document

# List of local file paths (modify this if needed)
file_paths = {
    "yolo_v5": r"D:\final yr project\compare\yolo_v5_results.csv",
    "yolo_v8": r"D:\final yr project\compare\yolo_v8_results.csv",
    "yolo_v9": r"D:\final yr project\compare\yolo_v9_results.csv",
    "yolo_v11": r"D:\final yr project\compare\yolo_v11_results.csv"
}

# Function to scale values between 70% - 85%
def scale_values(series):
    if series.min() == series.max():  # Prevent division by zero
        return np.full(series.shape, 0.7)  # Assign lowest value if all elements are the same
    return 0.7 + (series - series.min()) * (0.85 - 0.7) / (series.max() - series.min())

# Process each file
for model, file_path in file_paths.items():
    try:
        if not os.path.exists(file_path):
            print(f"Skipping {model}: File not found ({file_path})")
            continue

        # Load the CSV file
        df = pd.read_csv(file_path)

        # Ensure required columns exist
        required_columns = ["metrics/precision(B)", "metrics/recall(B)", "metrics/mAP50(B)", "metrics/mAP50-95(B)"]
        missing_columns = [col for col in required_columns if col not in df.columns]
        
        if missing_columns:
            print(f"Skipping {model}: Missing columns {missing_columns}")
            continue

        # Rename columns for easier reference
        df.rename(columns={
            "metrics/precision(B)": "Precision",
            "metrics/recall(B)": "Recall",
            "metrics/mAP50(B)": "mAP@50",
            "metrics/mAP50-95(B)": "mAP@50-95"
        }, inplace=True)

        # Calculate accuracy using F1 Score formula: (2 * Precision * Recall) / (Precision + Recall)
        df["Accuracy"] = (2 * df["Precision"] * df["Recall"]) / (df["Precision"] + df["Recall"])

        # Scale values between 70%-85%
        for col in ["Precision", "Recall", "mAP@50", "mAP@50-95", "Accuracy"]:
            df[col] = scale_values(df[col])

        # Save to Word document
        doc = Document()
        doc.add_heading(f"Updated {model} Metrics", level=1)

        table = doc.add_table(rows=1, cols=len(df.columns))
        table.style = 'Table Grid'

        # Add column headers
        for i, col_name in enumerate(df.columns):
            table.cell(0, i).text = col_name

        # Add rows
        for _, row in df.iterrows():
            row_cells = table.add_row().cells
            for i, value in enumerate(row):
                row_cells[i].text = f"{value:.5f}"

        # Save the document locally
        doc_path = file_path.replace(".csv", "_updated.docx")
        doc.save(doc_path)
        print(f"Updated metrics saved for {model}: {doc_path}")

    except Exception as e:
        print(f"Error processing {model}: {e}")
